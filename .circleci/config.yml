# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  setupdb:
    docker:
      - image: circleci/openjdk:8-jdk
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/libmanangment

      # Service container image

      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: libmanangment

    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client-9.6
      - run: whoami
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "CREATE TABLE books(
                 id serial PRIMARY KEY,
                 bookname VARCHAR (200) UNIQUE NOT NULL,
                 coverpicture VARCHAR (200) NOT NULL,
                 releasedate DATE NOT NULL,
                 author VARCHAR (100) NOT NULL
              );"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "INSERT INTO books (bookname,coverpicture,releasedate,author)
              VALUES ('Android in Action, Second Edition', 'https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson2.jpg',
               '2011-01-14','Robi Sen');"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "INSERT INTO books (bookname,coverpicture,releasedate,author)
              VALUES ('Unlocking Android', 'https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg',
               '2001-07-13','Charlie Collins');"

  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run build!
      - run:
          name: Build Project
          command: gradle build -x test
  test:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: libmanangment

      steps:
        - checkout
        - run:
            name: install dockerize
            command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            environment:
              DOCKERIZE_VERSION: v0.3.0
        - run:
            name: Wait for db
            command: dockerize -wait tcp://localhost:5432 -timeout 1m
        - run: sudo apt-get update
        - run: sudo apt-get install postgresql-client-9.6
        - run: whoami
        - run: |
            psql \
                      -d $TEST_DATABASE_URL \
                      -c "CREATE TABLE books(
                             id serial PRIMARY KEY,
                             bookname VARCHAR (200) UNIQUE NOT NULL,
                             coverpicture VARCHAR (200) NOT NULL,
                             releasedate DATE NOT NULL,
                             author VARCHAR (100) NOT NULL
                          );"
        - run: |
            psql \
            -d $TEST_DATABASE_URL \
            -c "INSERT INTO books (bookname,coverpicture,releasedate,author)
                VALUES ('Android in Action, Second Edition', 'https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson2.jpg',
                 '2011-01-14','Robi Sen');"
        - run: |
            psql \
            -d $TEST_DATABASE_URL \
            -c "INSERT INTO books (bookname,coverpicture,releasedate,author)
                VALUES ('Unlocking Android', 'https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg',
                 '2001-07-13','Charlie Collins');"


    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run build!
      - run:
          name: Build Project
          command: gradle build

      # Saves tests results
      - run:
          halt_build_on_fail: true
          name: Saves tests results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: build/libs/library-system-0.0.1-SNAPSHOT.jar

workflows:
  version: 2
  build-and-test:
    jobs:
      - setupdb
      - build:
          requires:
            - setupdb
      - test:
          requires:
            - build
